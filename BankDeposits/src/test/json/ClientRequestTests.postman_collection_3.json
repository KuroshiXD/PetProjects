{
	"info": {
		"_postman_id": "8160fe61-0b65-4d9e-a0bd-bc3d9430263a",
		"name": "ClientRequestTests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39447043"
	},
	"item": [
		{
			"name": "PostClientTest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains the expected fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('shortName');\r",
							"    pm.expect(responseData).to.have.property('legalForm');\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"address\": \"Gleb Street 20\",\r\n    \"name\": \"Gleb Tanki\",\r\n    \"shortName\": \"GT\",\r\n    \"legalForm\": \"JSC\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/clients",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteClientTest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/clients/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"clients",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAllClientsTest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/clients",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAllSortClientsByLegalForm",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify response body for legalForm LLC\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  jsonData.content.forEach(function(client) {\r",
							"    pm.expect(client.legalForm).to.equal('LLC');\r",
							"    pm.expect(client.name).to.be.a('string');\r",
							"    pm.expect(client.address).to.be.a('string');\r",
							"  });\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/clients?legalForm=LLC",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"clients"
					],
					"query": [
						{
							"key": "legalForm",
							"value": "LLC"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetClientByIdTest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains expected fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"address\");\r",
							"    pm.expect(jsonData).to.have.property(\"name\");\r",
							"    pm.expect(jsonData).to.have.property(\"shortName\")\r",
							"    pm.expect(jsonData).to.have.property(\"legalForm\");\r",
							"});\r",
							"\r",
							"pm.test(\"Correct id returned\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const requestedId = parseInt(pm.request.url.path[1], 10);\r",
							"    pm.expect(jsonData.id).to.equal(requestedId);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/clients/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"clients",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "PutClientTest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Updated address is correct\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.address).to.equal(\"Updated address\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"address\": \"New Rnd Street 5\",\r\n  \"name\": \"Decanter Pro\",\r\n  \"shortName\": \"DECP\",\r\n  \"legalForm\": \"LLC\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/clients/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"clients",
						"1"
					]
				}
			},
			"response": []
		}
	]
}